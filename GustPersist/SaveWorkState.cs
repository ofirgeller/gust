using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Gust.Persist
{
    public class SaveWorkState
    {
        public SaveWorkState(PersistenceManager contextProvider, JArray entitiesArray)
        {
            ContextProvider = contextProvider;
            var jObjects = entitiesArray.Select(jt => (dynamic)jt).ToList();
            var groups = jObjects.GroupBy(jo => (string)jo.entityAspect.entityTypeName).ToList();

            EntityInfoGroups = groups.Select(g =>
            {
                var entityType = ContextProvider.LookupEntityType(g.Key);
                var entityInfos = g.Select(jo => ContextProvider.CreateEntityInfoFromJson(jo, entityType)).Cast<EntityInfo>().ToList();
                return new EntityGroup() { EntityType = entityType, EntityInfos = entityInfos };
            }).ToList();
        }

        public void BeforeSave()
        {
            SaveMap = new Dictionary<Type, List<EntityInfo>>();
            EntityInfoGroups.ForEach(eg =>
            {
                var entityInfos = eg.EntityInfos.Where(ei => ContextProvider.BeforeSaveEntity(ei)).ToList();
                SaveMap.Add(eg.EntityType, entityInfos);
            });
            SaveMap = ContextProvider.BeforeSaveEntities(SaveMap);
            EntitiesWithAutoGeneratedKeys = SaveMap
              .SelectMany(eiGrp => eiGrp.Value)
              .Where(ei => ei.AutoGeneratedKey != null && ei.EntityState != EntityState.Detached)
              .ToList();
        }

        public void AfterSave()
        {
            ContextProvider.AfterSaveEntities(SaveMap, KeyMappings);
        }

        public PersistenceManager ContextProvider;
        protected List<EntityGroup> EntityInfoGroups;
        public Dictionary<Type, List<EntityInfo>> SaveMap { get; set; }
        public List<EntityInfo> EntitiesWithAutoGeneratedKeys { get; set; }
        public List<KeyMapping> KeyMappings;
        public List<EntityError> EntityErrors;
        public bool WasUsed { get; internal set; }

        public class EntityGroup
        {
            public Type EntityType;
            public List<EntityInfo> EntityInfos;
        }

        public SaveResult ToSaveResult()
        {
            WasUsed = true; // try to prevent reuse in subsequent SaveChanges
            if (EntityErrors != null)
            {
                return new SaveResult() { Errors = EntityErrors.Cast<object>().ToList() };
            }
            else
            {
                var entities = SaveMap.SelectMany(kvp => kvp.Value.Where(ei => (ei.EntityState != EntityState.Detached))
                  .Select(entityInfo => entityInfo.Entity)).ToList();

                var deletes = SaveMap.SelectMany(kvp => kvp.Value.Where(ei => (ei.EntityState == EntityState.Deleted || ei.EntityState == EntityState.Detached))
                  .Select(entityInfo => new EntityKey(entityInfo.Entity, ContextProvider.GetKeyValues(entityInfo)))).ToList();

                return new SaveResult() { Entities = entities, KeyMappings = KeyMappings, DeletedKeys = deletes };
            }
        }
    }
}