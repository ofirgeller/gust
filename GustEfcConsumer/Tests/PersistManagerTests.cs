using FluentAssertions;
using Gust;
using GustEfcConsumer.Model;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json.Linq;
using NUnit.Framework;
using System.Linq;

namespace GustEfcConsumer.Tests
{
    /// <summary>
    /// Notice that the tests that depend on the data in the database (vs the scheme) 
    /// have an order attiribute, this allows us to not have to recreate the
    /// DB baseline state for each test
    /// </summary>
    [TestFixture]
    public class PersistManagerTests
    {
        PersistManager<BloggerContext> UUT;
        PersistManager<BloggerContext> UutWithGivenCtx;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            /// make sure w have a fresh  and empty DB .  
            using (var setupCtx = new BloggerContext())
            {
                setupCtx.Database.EnsureDeleted();
                setupCtx.Database.EnsureCreated();
            }

            UUT = new PersistManager<BloggerContext>();
            var ctxTheManagerDoesNotOwn = BloggerContext.CreateWithNpgsql();
            UutWithGivenCtx = new PersistManager<BloggerContext>(ctxTheManagerDoesNotOwn);
        }

        SaveResult InsertTestDataBaseLineIntoDb(PersistManager<BloggerContext> uut)
        {
            var blog = new Blog
            {
                Id = -1,
                Url = "www.example.com"
            };

            var blogEntityAspect = new EntityAspect(blog, EntityState.Added);

            var post = new Post
            {
                BlogId = -1,
                Content = "I am content",
                Id = -2,
                Title = "this is the title"
            };

            var postEntityAspect = new EntityAspect(post, EntityState.Added);

            var saveBundle0 = new ClientSaveBundle();

            saveBundle0.AddEntity(blogEntityAspect);
            saveBundle0.AddEntity(postEntityAspect);

            var parsedSaveBundle = JObject.Parse(saveBundle0.ToJson());

            var saveResult = uut.SaveChanges(parsedSaveBundle.ToString());

            return saveResult;
        }

        [Test]
        public void GetEntitySetsInfo_Test()
        {
            var entitySetsInfo = UUT.GetEntitySetsInfo();

            entitySetsInfo.Should().HaveCount(5).And.OnlyHaveUniqueItems(esi => esi.JsName);
            entitySetsInfo.Should().HaveCount(5).And.OnlyHaveUniqueItems(esi => esi.ClrType);
            entitySetsInfo.Should().HaveCount(5).And.OnlyHaveUniqueItems(esi => esi.EntityType);
        }

        [Test]
        public void PersistManager_EntityInfoFromJsonToken_UnmappedProperties()
        {
            var entityJson = @"         
       {
    ""Id"": -1,
    ""Url"": ""https://example.com"",
    ""__unmapped"": {
                ""unmappedPropertyName"": ""unmapped value""
    },
    ""entityAspect"": {
        ""entityTypeName"": ""Blog:#GustEfcConsumer.Model"",
        ""defaultResourceName"": ""Blogs"",
        ""entityState"": ""Added"",
        ""originalValuesMap"": { },
        ""autoGeneratedKey"": {
                    ""propertyName"": ""Id"",
            ""autoGeneratedKeyType"": ""Identity""
        }
            }
        }
";

            var entityJToken = JToken.Parse(entityJson);

            var entityInfo = UUT.EntityInfoFromJsonToken(entityJToken);

            entityInfo.UnmappedValuesMap.Should().HaveCount(1);
            entityInfo.UnmappedValuesMap.Should().ContainKey("unmappedPropertyName")
                .And.ContainValue("unmapped value");
        }

        [Test]
        public void PersistManager_EntityInfoFromJsonToken_OriginalValues()
        {
            var entityJson = @"         
               {
            ""Id"": -1,
            ""Url"": ""https://example.com"",
            ""Subject"": ""sports"",
            ""entityAspect"": {
                ""entityTypeName"": ""Blog:#GustEfcConsumer.Model"",
                ""defaultResourceName"": ""Blogs"",
                ""entityState"": ""Modified "",
                ""originalValuesMap"": {
                    ""Url"": ""https://notExample.com"",
                    ""Subject"": ""Lifestyle""
                }
                    }
                }
                 ";

            var entityJToken = JToken.Parse(entityJson);

            var entityInfo = UUT.EntityInfoFromJsonToken(entityJToken);

            entityInfo.OriginalValuesMap.Should().HaveCount(2);

            entityInfo.OriginalValuesMap.Should().ContainKeys("Url", "Subject")
                .And.ContainValues("https://notExample.com", "Lifestyle");
        }

        [Test, Order(0)]
        public void PersistManager_Add_DependentEntity()
        {
            var saveResult = InsertTestDataBaseLineIntoDb(UUT);
            var blogs = UUT.Context.Blogs.ToList();
            blogs.Single().Posts.Should().HaveCount(1);
            saveResult.KeyMappings.Count.Should().Be(2);
        }

        [Test, Order(1)]
        public void PersistManager_Delete_DependentEntity()
        {
            var uut = new PersistManager<BloggerContext>();

            var ctx = new BloggerContext();

            var blogs = ctx.Blogs.ToList();
            var posts = ctx.Posts.ToList();
            blogs.Count.Should().BeGreaterThan(0);
            posts.Count.Should().BeGreaterThan(0);

            var blogsToDelete = blogs.Select(b => new EntityAspect(b, EntityState.Deleted)).ToList();
            var postsToDelete = posts.Select(p => new EntityAspect(p, EntityState.Deleted)).ToList();

            var saveBundle0 = new ClientSaveBundle();

            blogsToDelete.ForEach(b => saveBundle0.AddEntity(b));
            postsToDelete.ForEach(p => saveBundle0.AddEntity(p));

            var parsedSaveBundle = JObject.Parse(saveBundle0.ToJson());

            var saveResultOfDelete = uut.SaveChanges(parsedSaveBundle.ToString());

            var postDeleteBlogs = uut.Context.Blogs.ToList();
            postDeleteBlogs.Count.Should().Be(0);
            saveResultOfDelete.DeletedKeys.Count.Should().Be(blogs.Count + posts.Count);
        }
    }
}
